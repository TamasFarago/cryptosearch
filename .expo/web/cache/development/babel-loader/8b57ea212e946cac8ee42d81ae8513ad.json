{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport axios from 'axios';\nvar screenWidth = Dimensions.get(\"screen\").width;\nvar baseURL = \"https://api.coingecko.com/api/v3\";\nexport default function App() {\n  var _useState = useState(\"bitcoin\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      price = _useState4[0],\n      setPrice = _useState4[1];\n\n  console.log(\"helo\", price);\n\n  var getPrice = function getPrice() {\n    var response, data;\n    return _regeneratorRuntime.async(function getPrice$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(baseURL + \"/simple/price?ids=\" + query + \"&vs_currencies=usd\"));\n\n          case 3:\n            response = _context.sent;\n            data = response.data;\n            setPrice(Object.keys(data).map(function (k) {\n              return data[k];\n            }));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(SafeAreaView, {\n    style: {\n      backgroundColor: '#1a1845',\n      flex: 1\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: Platform.OS === 'ios' ? 'padding' : null\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: function onChangeText(text) {\n      return setQuery(text);\n    }\n  }), price && React.createElement(Text, null, price[0].usd)), React.createElement(TouchableOpacity, {\n    activeOpacity: 0.8,\n    disabled: !query.length,\n    onPress: getPrice\n  }, React.createElement(View, {\n    style: [styles.button, {\n      opacity: !query.length ? 0.5 : 1\n    }]\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Search\"))))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 0,\n    backgroundColor: '#1a1845',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  textInput: {\n    height: 50,\n    width: screenWidth * 0.8,\n    borderWidth: 0,\n    borderBottomWidth: 1,\n    borderBottomColor: \"rgba(227, 227, 227, 0.7)\",\n    color: \"white\",\n    fontSize: 20,\n    fontWeight: \"600\",\n    paddingHorizontal: 5\n  },\n  button: {\n    width: screenWidth * 0.8,\n    height: 40,\n    borderRadius: 16,\n    backgroundColor: \"rgba(109, 207, 135, 1)\",\n    marginTop: 30,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 10\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 20,\n    fontWeight: \"600\"\n  }\n});","map":{"version":3,"sources":["/Users/tamasfarago/cryptosearcher/App.tsx"],"names":["React","useState","axios","screenWidth","Dimensions","get","width","baseURL","App","query","setQuery","price","setPrice","console","log","getPrice","response","data","Object","keys","map","k","error","backgroundColor","flex","styles","container","Platform","OS","textInput","text","usd","length","button","opacity","buttonText","StyleSheet","create","alignItems","justifyContent","height","borderWidth","borderBottomWidth","borderBottomColor","color","fontSize","fontWeight","paddingHorizontal","borderRadius","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {useState} from 'react';\nimport { StyleSheet, Text, View, Platform, TextInput, SafeAreaView, Dimensions, Keyboard, TouchableOpacity,ScrollView, KeyboardAvoidingView } from 'react-native';\nimport axios from 'axios';\n\nconst screenWidth = Dimensions.get(\"screen\").width\nconst baseURL = \"https://api.coingecko.com/api/v3\"\n\n\n\nexport default function App() {\n  const [query, setQuery] = useState<String>(\"bitcoin\")\n  const [price, setPrice] = useState<any>()\n  console.log(\"helo\", price)\n\n  const getPrice = async() => {\n    try {\n      const response = await axios.get(`${baseURL}/simple/price?ids=${query}&vs_currencies=usd`);\n      let data = response.data\n      setPrice(Object.keys(data).map(k => data[k]))\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n\n\n  return (\n    <>\n    <SafeAreaView style={{backgroundColor: '#1a1845', flex: 1}}>\n    <KeyboardAvoidingView \n      style={styles.container} \n      behavior={Platform.OS === 'ios' ? 'padding' : null}>\n      <View style={styles.container}>\n        <TextInput \n          style={styles.textInput}\n          onChangeText={text => setQuery(text)}\n          />\n          {price &&Â <Text>{price[0].usd}</Text>}\n      </View> \n      \n\n      <TouchableOpacity activeOpacity={0.8} disabled={!query.length} onPress={getPrice}>\n          <View style={[styles.button, {opacity: !query.length? 0.5 : 1}]}>\n              <Text style={styles.buttonText}>Search</Text>\n          </View>\n        </TouchableOpacity>\n      </KeyboardAvoidingView> \n    </SafeAreaView>\n    </>\n  );\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 0,\n    backgroundColor: '#1a1845',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  textInput: {\n    height: 50,\n    width: screenWidth*0.8,\n    borderWidth: 0,\n    borderBottomWidth: 1,\n    borderBottomColor: \"rgba(227, 227, 227, 0.7)\",\n    color: \"white\",\n    fontSize: 20,\n    fontWeight: \"600\",\n    paddingHorizontal: 5\n  },\n  button: {\n    width: screenWidth*0.8,\n    height: 40,\n    borderRadius: 16,\n    backgroundColor: \"rgba(109, 207, 135, 1)\",\n    marginTop: 30,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 10\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 20,\n    fontWeight: \"600\"\n  }\n});\n"]},"metadata":{},"sourceType":"module"}