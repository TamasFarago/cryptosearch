{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nexport var fetchData = function fetchData(setPrice, setCurrentCrypto, setLoading, baseURL, setOpenList, query) {\n  var response, data;\n  return _regeneratorRuntime.async(function fetchData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          setLoading(true);\n          setOpenList(false);\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(axios.get(baseURL + \"/simple/price?ids=\" + query + \"&vs_currencies=usd\"));\n\n        case 5:\n          response = _context.sent;\n          data = response.data;\n\n          if (Object.keys(data).length !== 0) {\n            setPrice(Object.keys(data).map(function (k) {\n              return data[k];\n            }));\n            setCurrentCrypto(Object.keys(data)[0]);\n          }\n\n          setLoading(false);\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](2);\n          console.error(_context.t0);\n          setLoading(false);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 11]], Promise);\n};","map":{"version":3,"sources":["/Users/tamasfarago/cryptosearcher/globalFunctions/FetchData.ts"],"names":["axios","fetchData","setPrice","setCurrentCrypto","setLoading","baseURL","setOpenList","query","get","response","data","Object","keys","length","map","k","console","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAcA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAMC,QAAN,EAAqCC,gBAArC,EAA6EC,UAA7E,EAA8GC,OAA9G,EAA+HC,WAA/H,EAAiKC,KAAjK;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBH,UAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,UAAAA,WAAW,CAAC,KAAD,CAAX;AAFqB;AAAA;AAAA,2CAIMN,KAAK,CAACQ,GAAN,CAAaH,OAAb,0BAAyCE,KAAzC,wBAJN;;AAAA;AAIXE,UAAAA,QAJW;AAKbC,UAAAA,IALa,GAKND,QAAQ,CAACC,IALH;;AAMjB,cAAGC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,KAA6B,CAAhC,EAAkC;AAChCX,YAAAA,QAAQ,CAACS,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBI,GAAlB,CAAsB,UAAAC,CAAC;AAAA,qBAAIL,IAAI,CAACK,CAAD,CAAR;AAAA,aAAvB,CAAD,CAAR;AACAZ,YAAAA,gBAAgB,CAACQ,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkB,CAAlB,CAAD,CAAhB;AACD;;AACDN,UAAAA,UAAU,CAAC,KAAD,CAAV;AAViB;AAAA;;AAAA;AAAA;AAAA;AAYjBY,UAAAA,OAAO,CAACC,KAAR;AACAb,UAAAA,UAAU,CAAC,KAAD,CAAV;;AAbiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","sourcesContent":["import axios from 'axios';\nimport { SetStateAction } from 'react';\n\n\ninterface fetchList {\n    filteredList: [],\n    setCurrentCrypto: SetStateAction<any>,\n    setPrice: SetStateAction<any>\n    setLoading: SetStateAction<any>,\n    baseURL: string,\n    setOpenList: SetStateAction<any>\n}\n\n\nexport const fetchData = async(setPrice: SetStateAction<any>, setCurrentCrypto: SetStateAction<any>,  setLoading: SetStateAction<any>, baseURL: string, setOpenList: SetStateAction<any>, query?: string, ) => {\n    setLoading(true)\n    setOpenList(false)\n      try {\n        const response = await axios.get(`${baseURL}/simple/price?ids=${query}&vs_currencies=usd`);\n        let data = response.data\n        if(Object.keys(data).length !== 0){\n          setPrice(Object.keys(data).map(k => data[k]))\n          setCurrentCrypto(Object.keys(data)[0])\n        }\n        setLoading(false)\n      } catch (error) {\n        console.error(error);\n        setLoading(false)\n      }\n  }"]},"metadata":{},"sourceType":"module"}