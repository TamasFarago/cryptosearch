{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nexport var fetchData = function fetchData(setPrice, setCurrentCrypto, setLoading, baseURL, setOpenList, query, item) {\n  var param, response, data;\n  return _regeneratorRuntime.async(function fetchData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          setLoading(true);\n          setOpenList(false);\n          param = query ? query : item.id;\n          console.log(\"PARAM\", item);\n          _context.prev = 4;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(axios.get(baseURL + \"/simple/price?ids=\" + param + \"&vs_currencies=usd\"));\n\n        case 7:\n          response = _context.sent;\n          data = response.data;\n          console.log(\"DATA\", data);\n\n          if (Object.keys(data).length !== 0) {\n            setPrice(Object.keys(data).map(function (k) {\n              return data[k];\n            }));\n            setCurrentCrypto(Object.keys(data)[0]);\n          }\n\n          setLoading(false);\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](4);\n          console.error(_context.t0);\n          setLoading(false);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 14]], Promise);\n};","map":{"version":3,"sources":["/Users/tamasfarago/cryptosearcher/globalFunctions/FetchData.ts"],"names":["axios","fetchData","setPrice","setCurrentCrypto","setLoading","baseURL","setOpenList","query","item","param","id","console","log","get","response","data","Object","keys","length","map","k","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAMC,QAAN,EAAqCC,gBAArC,EAA6EC,UAA7E,EAA8GC,OAA9G,EAA+HC,WAA/H,EAAiKC,KAAjK,EAAiLC,IAAjL;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBJ,UAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,UAAAA,WAAW,CAAC,KAAD,CAAX;AACMG,UAAAA,KAHe,GAGPF,KAAK,GAAEA,KAAF,GAAUC,IAAI,CAACE,EAHb;AAIrBC,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,IAArB;AAJqB;AAAA;AAAA,2CAMMR,KAAK,CAACa,GAAN,CAAaR,OAAb,0BAAyCI,KAAzC,wBANN;;AAAA;AAMXK,UAAAA,QANW;AAObC,UAAAA,IAPa,GAOND,QAAQ,CAACC,IAPH;AAQjBJ,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBG,IAApB;;AACA,cAAGC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,KAA6B,CAAhC,EAAkC;AAChChB,YAAAA,QAAQ,CAACc,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBI,GAAlB,CAAsB,UAAAC,CAAC;AAAA,qBAAIL,IAAI,CAACK,CAAD,CAAR;AAAA,aAAvB,CAAD,CAAR;AACAjB,YAAAA,gBAAgB,CAACa,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkB,CAAlB,CAAD,CAAhB;AACD;;AACDX,UAAAA,UAAU,CAAC,KAAD,CAAV;AAbiB;AAAA;;AAAA;AAAA;AAAA;AAejBO,UAAAA,OAAO,CAACU,KAAR;AACAjB,UAAAA,UAAU,CAAC,KAAD,CAAV;;AAhBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","sourcesContent":["import axios from 'axios';\nimport { SetStateAction } from 'react';\n\nexport const fetchData = async(setPrice: SetStateAction<any>, setCurrentCrypto: SetStateAction<any>,  setLoading: SetStateAction<any>, baseURL: string, setOpenList: SetStateAction<any>, query?: string, item?: any) => {\n    setLoading(true)\n    setOpenList(false)\n    const param = query? query : item.id\n    console.log(\"PARAM\", item)\n      try {\n        const response = await axios.get(`${baseURL}/simple/price?ids=${param}&vs_currencies=usd`);\n        let data = response.data\n        console.log(\"DATA\", data)\n        if(Object.keys(data).length !== 0){\n          setPrice(Object.keys(data).map(k => data[k]))\n          setCurrentCrypto(Object.keys(data)[0])\n        }\n        setLoading(false)\n      } catch (error) {\n        console.error(error);\n        setLoading(false)\n      }\n  }"]},"metadata":{},"sourceType":"module"}