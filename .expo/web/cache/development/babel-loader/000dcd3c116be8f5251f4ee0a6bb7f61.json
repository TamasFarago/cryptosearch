{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from 'axios';\nvar screenWidth = Dimensions.get(\"screen\").width;\nvar screenHeight = Dimensions.get(\"screen\").height;\n\nvar CryptoList = function CryptoList(_ref) {\n  var filteredList = _ref.filteredList,\n      setQuery = _ref.setQuery,\n      getPrice = _ref.getPrice,\n      query = _ref.query,\n      setCurrentCrypto = _ref.setCurrentCrypto,\n      setPrice = _ref.setPrice,\n      setLoading = _ref.setLoading,\n      baseURL = _ref.baseURL;\n\n  var select = function select(item) {\n    var response, data;\n    return _regeneratorRuntime.async(function select$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(baseURL + \"/simple/price?ids=\" + item.name + \"&vs_currencies=usd\"));\n\n          case 4:\n            response = _context.sent;\n            data = response.data;\n\n            if (Object.keys(data).length !== 0) {\n              setPrice(Object.keys(data).map(function (k) {\n                return data[k];\n              }));\n              setCurrentCrypto(Object.keys(data)[0]);\n            }\n\n            setLoading(false);\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n            setLoading(false);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 10]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ScrollView, null, filteredList.map(function (item, index) {\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return select(item);\n      }\n    }, React.createElement(Text, {\n      style: styles.item\n    }, item.name));\n  })));\n};\n\nexport default CryptoList;\nvar styles = StyleSheet.create({\n  container: {\n    width: screenWidth * 0.8,\n    backgroundColor: \"rgba(60, 58, 102, 0.8)\",\n    maxHeight: 200,\n    marginTop: 5\n  },\n  item: {\n    fontSize: 16,\n    color: \"white\",\n    margin: 5\n  }\n});","map":{"version":3,"sources":["/Users/tamasfarago/cryptosearcher/components/CryptoList.tsx"],"names":["React","axios","screenWidth","Dimensions","get","width","screenHeight","height","CryptoList","filteredList","setQuery","getPrice","query","setCurrentCrypto","setPrice","setLoading","baseURL","select","item","name","response","data","Object","keys","length","map","k","console","error","styles","container","index","StyleSheet","create","backgroundColor","maxHeight","marginTop","fontSize","color","margin"],"mappings":";AAAA,OAAOA,KAAP,MAA+B,OAA/B;;;;;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,IAAMC,WAAmB,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAArD;AACA,IAAMC,YAAoB,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAAtD;;AAEA,IAAMC,UAAoB,GAAG,SAAvBA,UAAuB,OAA+F;AAAA,MAA7FC,YAA6F,QAA7FA,YAA6F;AAAA,MAA/EC,QAA+E,QAA/EA,QAA+E;AAAA,MAArEC,QAAqE,QAArEA,QAAqE;AAAA,MAA3DC,KAA2D,QAA3DA,KAA2D;AAAA,MAApDC,gBAAoD,QAApDA,gBAAoD;AAAA,MAAlCC,QAAkC,QAAlCA,QAAkC;AAAA,MAAxBC,UAAwB,QAAxBA,UAAwB;AAAA,MAAZC,OAAY,QAAZA,OAAY;;AAExH,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACXH,YAAAA,UAAU,CAAC,IAAD,CAAV;AADW;AAAA;AAAA,6CAGYd,KAAK,CAACG,GAAN,CAAaY,OAAb,0BAAyCE,IAAI,CAACC,IAA9C,wBAHZ;;AAAA;AAGLC,YAAAA,QAHK;AAIPC,YAAAA,IAJO,GAIAD,QAAQ,CAACC,IAJT;;AAKX,gBAAGC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,KAA6B,CAAhC,EAAkC;AAChCV,cAAAA,QAAQ,CAACQ,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBI,GAAlB,CAAsB,UAAAC,CAAC;AAAA,uBAAIL,IAAI,CAACK,CAAD,CAAR;AAAA,eAAvB,CAAD,CAAR;AACAb,cAAAA,gBAAgB,CAACS,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkB,CAAlB,CAAD,CAAhB;AACD;;AACDN,YAAAA,UAAU,CAAC,KAAD,CAAV;AATW;AAAA;;AAAA;AAAA;AAAA;AAWXY,YAAAA,OAAO,CAACC,KAAR;AACAb,YAAAA,UAAU,CAAC,KAAD,CAAV;;AAZW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAmBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEc,MAAM,CAACC;AAApB,KACA,oBAAC,UAAD,QACKrB,YAAY,CAACgB,GAAb,CAAiB,UAACP,IAAD,EAAYa,KAAZ;AAAA,WACd,oBAAC,gBAAD;AAAkB,MAAA,OAAO,EAAE;AAAA,eAAMd,MAAM,CAACC,IAAD,CAAZ;AAAA;AAA3B,OACA,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEW,MAAM,CAACX;AAApB,OAA2BA,IAAI,CAACC,IAAhC,CADA,CADc;AAAA,GAAjB,CADL,CADA,CADJ;AAWH,CAhCD;;AAkCA,eAAeX,UAAf;AAEA,IAAMqB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPzB,IAAAA,KAAK,EAAEH,WAAW,GAAG,GADd;AAEPgC,IAAAA,eAAe,EAAE,wBAFV;AAGPC,IAAAA,SAAS,EAAE,GAHJ;AAIPC,IAAAA,SAAS,EAAE;AAJJ,GADkB;AAS7BlB,EAAAA,IAAI,EAAE;AACFmB,IAAAA,QAAQ,EAAE,EADR;AAEFC,IAAAA,KAAK,EAAE,OAFL;AAIFC,IAAAA,MAAM,EAAE;AAJN;AATuB,CAAlB,CAAf","sourcesContent":["import React, {useEffect} from 'react'\nimport { StyleSheet, Text, View, Dimensions, ScrollView, TouchableOpacity} from 'react-native'\nimport axios from 'axios';\n\n\nconst screenWidth: number = Dimensions.get(\"screen\").width\nconst screenHeight: number = Dimensions.get(\"screen\").height\n\nconst CryptoList: React.FC = ({filteredList, setQuery, getPrice, query, setCurrentCrypto, setPrice, setLoading, baseURL}) =>{\n\n    const select = async(item) => {\n        setLoading(true)\n      try {\n        const response = await axios.get(`${baseURL}/simple/price?ids=${item.name}&vs_currencies=usd`);\n        let data = response.data\n        if(Object.keys(data).length !== 0){\n          setPrice(Object.keys(data).map(k => data[k]))\n          setCurrentCrypto(Object.keys(data)[0])\n        }\n        setLoading(false)\n      } catch (error) {\n        console.error(error);\n        setLoading(false)\n      }\n    }\n\n    \n\n\n    return (\n        <View style={styles.container}>\n        <ScrollView>\n            {filteredList.map((item: any, index: number) => (\n                <TouchableOpacity onPress={() =>Â select(item)}>\n                <Text style={styles.item}>{item.name}</Text>\n                </TouchableOpacity>\n            ))}\n        </ScrollView>\n        </View>\n    )\n}\n\nexport default CryptoList\n\nconst styles = StyleSheet.create({\n    container: {\n        width: screenWidth * 0.8,\n        backgroundColor: \"rgba(60, 58, 102, 0.8)\",\n        maxHeight: 200,\n        marginTop: 5,\n       \n        // overflow: \"hidden\"\n    },\n    item: {\n        fontSize: 16,\n        color: \"white\",\n        // marginBottom: 5,\n        margin: 5\n    }\n})\n"]},"metadata":{},"sourceType":"module"}