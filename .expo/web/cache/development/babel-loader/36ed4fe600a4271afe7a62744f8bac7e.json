{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from 'axios';\nvar screenWidth = Dimensions.get(\"screen\").width;\nvar screenHeight = Dimensions.get(\"screen\").height;\n\nvar CryptoList = function CryptoList(_ref) {\n  var filteredList = _ref.filteredList,\n      setCurrentCrypto = _ref.setCurrentCrypto,\n      setPrice = _ref.setPrice,\n      setLoading = _ref.setLoading,\n      baseURL = _ref.baseURL,\n      setOpenList = _ref.setOpenList;\n\n  var select = function select(item) {\n    var response, data;\n    return _regeneratorRuntime.async(function select$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            setOpenList(false);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.get(baseURL + \"/simple/price?ids=\" + item.name + \"&vs_currencies=usd\"));\n\n          case 5:\n            response = _context.sent;\n            data = response.data;\n            console.log(\"DATA\", data);\n\n            if (Object.keys(data).length !== 0) {\n              setPrice(Object.keys(data).map(function (k) {\n                return data[k];\n              }));\n              setCurrentCrypto(Object.keys(data)[0]);\n            }\n\n            setLoading(false);\n            _context.next = 16;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(_context.t0);\n            setLoading(false);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ScrollView, null, filteredList.map(function (item, index) {\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return select(item);\n      }\n    }, React.createElement(Text, {\n      style: styles.item\n    }, item.name));\n  })));\n};\n\nexport default CryptoList;\nvar styles = StyleSheet.create({\n  container: {\n    width: screenWidth * 0.8,\n    backgroundColor: \"rgba(60, 58, 102, 01)\",\n    maxHeight: 200,\n    marginTop: 5,\n    position: \"absolute\",\n    zIndex: 999,\n    top: 50\n  },\n  item: {\n    fontSize: 16,\n    color: \"white\",\n    margin: 5\n  }\n});","map":{"version":3,"sources":["/Users/tamasfarago/cryptosearcher/components/CryptoList.tsx"],"names":["React","axios","screenWidth","Dimensions","get","width","screenHeight","height","CryptoList","filteredList","setCurrentCrypto","setPrice","setLoading","baseURL","setOpenList","select","item","name","response","data","console","log","Object","keys","length","map","k","error","styles","container","index","StyleSheet","create","backgroundColor","maxHeight","marginTop","position","zIndex","top","fontSize","color","margin"],"mappings":";AAAA,OAAOA,KAAP,MAA+B,OAA/B;;;;;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,IAAMC,WAAmB,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAArD;AACA,IAAMC,YAAoB,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAAtD;;AAaA,IAAMC,UAA+B,GAAG,SAAlCA,UAAkC,OAAiF;AAAA,MAA/EC,YAA+E,QAA/EA,YAA+E;AAAA,MAAjEC,gBAAiE,QAAjEA,gBAAiE;AAAA,MAA/CC,QAA+C,QAA/CA,QAA+C;AAAA,MAArCC,UAAqC,QAArCA,UAAqC;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,WAAgB,QAAhBA,WAAgB;;AAErH,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACfJ,YAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,YAAAA,WAAW,CAAC,KAAD,CAAX;AAFe;AAAA;AAAA,6CAIYb,KAAK,CAACG,GAAN,CAAaS,OAAb,0BAAyCG,IAAI,CAACC,IAA9C,wBAJZ;;AAAA;AAILC,YAAAA,QAJK;AAKPC,YAAAA,IALO,GAKAD,QAAQ,CAACC,IALT;AAMXC,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;;AACA,gBAAGG,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,MAAlB,KAA6B,CAAhC,EAAkC;AAChCb,cAAAA,QAAQ,CAACW,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBM,GAAlB,CAAsB,UAAAC,CAAC;AAAA,uBAAIP,IAAI,CAACO,CAAD,CAAR;AAAA,eAAvB,CAAD,CAAR;AACAhB,cAAAA,gBAAgB,CAACY,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkB,CAAlB,CAAD,CAAhB;AACD;;AACDP,YAAAA,UAAU,CAAC,KAAD,CAAV;AAXW;AAAA;;AAAA;AAAA;AAAA;AAaXQ,YAAAA,OAAO,CAACO,KAAR;AACAf,YAAAA,UAAU,CAAC,KAAD,CAAV;;AAdW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAqBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEgB,MAAM,CAACC;AAApB,KACA,oBAAC,UAAD,QACKpB,YAAY,CAACgB,GAAb,CAAiB,UAACT,IAAD,EAAYc,KAAZ;AAAA,WACd,oBAAC,gBAAD;AAAkB,MAAA,OAAO,EAAE;AAAA,eAAMf,MAAM,CAACC,IAAD,CAAZ;AAAA;AAA3B,OACA,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEY,MAAM,CAACZ;AAApB,OAA2BA,IAAI,CAACC,IAAhC,CADA,CADc;AAAA,GAAjB,CADL,CADA,CADJ;AAWH,CAlCD;;AAoCA,eAAeT,UAAf;AAEA,IAAMoB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPxB,IAAAA,KAAK,EAAEH,WAAW,GAAG,GADd;AAEP+B,IAAAA,eAAe,EAAE,uBAFV;AAGPC,IAAAA,SAAS,EAAE,GAHJ;AAIPC,IAAAA,SAAS,EAAE,CAJJ;AAKPC,IAAAA,QAAQ,EAAE,UALH;AAMPC,IAAAA,MAAM,EAAE,GAND;AAOPC,IAAAA,GAAG,EAAE;AAPE,GADkB;AAY7BtB,EAAAA,IAAI,EAAE;AACFuB,IAAAA,QAAQ,EAAE,EADR;AAEFC,IAAAA,KAAK,EAAE,OAFL;AAIFC,IAAAA,MAAM,EAAE;AAJN;AAZuB,CAAlB,CAAf","sourcesContent":["import React, {useEffect} from 'react'\nimport { StyleSheet, Text, View, Dimensions, ScrollView, TouchableOpacity} from 'react-native'\nimport axios from 'axios';\nimport { SetStateAction } from 'react';\n\n\nconst screenWidth: number = Dimensions.get(\"screen\").width\nconst screenHeight: number = Dimensions.get(\"screen\").height\n\ninterface fetchList {\n    filteredList: () => object,\n    setCurrentCrypto: SetStateAction<any>,\n    setPrice: SetStateAction<any>\n    setLoading: SetStateAction<any>,\n    baseURL: string,\n    setOpenList: SetStateAction<any>\n\n\n}\n\nconst CryptoList: React.FC<fetchList> = ({filteredList, setCurrentCrypto, setPrice, setLoading, baseURL, setOpenList}) =>{\n\n    const select = async(item: any) => {\n    setLoading(true)\n    setOpenList(false)\n      try {\n        const response = await axios.get(`${baseURL}/simple/price?ids=${item.name}&vs_currencies=usd`);\n        let data = response.data\n        console.log(\"DATA\", data)\n        if(Object.keys(data).length !== 0){\n          setPrice(Object.keys(data).map(k => data[k]))\n          setCurrentCrypto(Object.keys(data)[0])\n        }\n        setLoading(false)\n      } catch (error) {\n        console.error(error);\n        setLoading(false)\n      }\n    }\n\n    \n\n\n    return (\n        <View style={styles.container}>\n        <ScrollView>\n            {filteredList.map((item: any, index: number) => (\n                <TouchableOpacity onPress={() =>Â select(item)}>\n                <Text style={styles.item}>{item.name}</Text>\n                </TouchableOpacity>\n            ))}\n        </ScrollView>\n        </View>\n    )\n}\n\nexport default CryptoList\n\nconst styles = StyleSheet.create({\n    container: {\n        width: screenWidth * 0.8,\n        backgroundColor: \"rgba(60, 58, 102, 01)\",\n        maxHeight: 200,\n        marginTop: 5,\n        position: \"absolute\",\n        zIndex: 999,\n        top: 50\n       \n        // overflow: \"hidden\"\n    },\n    item: {\n        fontSize: 16,\n        color: \"white\",\n        // marginBottom: 5,\n        margin: 5\n    }\n})\n"]},"metadata":{},"sourceType":"module"}